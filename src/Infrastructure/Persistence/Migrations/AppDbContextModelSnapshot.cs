// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Application.Common.OutboxMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccuredOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("occured_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("p_k_outbox_message");

                    b.ToTable("outbox_message");
                });

            modelBuilder.Entity("Domain.Aggregates.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER")
                        .HasColumnName("level");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.Property<decimal>("Wallet")
                        .HasColumnType("TEXT")
                        .HasColumnName("wallet");

                    b.HasKey("Id")
                        .HasName("p_k_user");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("i_x_user_username");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = "user_0001js40400000000000000000",
                            Created = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Level = 1,
                            Username = "ddjerqq",
                            Wallet = 1000m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("rarity");

                    b.ComplexProperty<Dictionary<string, object>>("Image", "Domain.Entities.Item.Image#ItemImage", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("BattleScarredImage")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("battle_scarred_img");

                            b1.Property<string>("FactoryNewImage")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("factory_new_img");

                            b1.Property<string>("FieldTestedImage")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("field_tested_img");

                            b1.Property<string>("MinimalWearImage")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("minimal_wear_img");

                            b1.Property<string>("WellWornImage")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("well_worn_img");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Quality", "Domain.Entities.Item.Quality#ItemQuality", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("IsStatTrack")
                                .HasColumnType("INTEGER")
                                .HasColumnName("is_stat_track");

                            b1.Property<float>("Value")
                                .HasColumnType("REAL")
                                .HasColumnName("quality");
                        });

                    b.HasKey("Id")
                        .HasName("p_k_item");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("i_x_item_owner_id");

                    b.ToTable("item");
                });

            modelBuilder.Entity("Domain.Entities.Item", b =>
                {
                    b.HasOne("Domain.Aggregates.User", "Owner")
                        .WithMany("Inventory")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_item_user_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Aggregates.User", b =>
                {
                    b.Navigation("Inventory");
                });
#pragma warning restore 612, 618
        }
    }
}
