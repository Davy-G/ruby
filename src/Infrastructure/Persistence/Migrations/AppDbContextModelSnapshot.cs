// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Application.Common.OutboxMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccuredOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("occured_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("p_k_outbox_message");

                    b.ToTable("outbox_message");
                });

            modelBuilder.Entity("Domain.Aggregates.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER")
                        .HasColumnName("level");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.Property<decimal>("Wallet")
                        .HasColumnType("TEXT")
                        .HasColumnName("wallet");

                    b.HasKey("Id")
                        .HasName("p_k_user");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("i_x_user_email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("i_x_user_username");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Domain.Entities.Case", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("CaseTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("case_type_id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsOpened")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_opened");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("OpenedOn")
                        .HasColumnType("TEXT")
                        .HasColumnName("opened_on");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("p_k_case");

                    b.HasIndex("CaseTypeId")
                        .HasDatabaseName("i_x_case_case_type_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("i_x_case_owner_id");

                    b.ToTable("case");
                });

            modelBuilder.Entity("Domain.Entities.CaseType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("image_url");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_case_type");

                    b.ToTable("case_type");
                });

            modelBuilder.Entity("Domain.Entities.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("ItemTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("item_type_id");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.ComplexProperty<Dictionary<string, object>>("Quality", "Domain.Entities.Item.Quality#ItemQuality", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("IsStatTrack")
                                .HasColumnType("INTEGER")
                                .HasColumnName("is_stat_track");

                            b1.Property<float>("Value")
                                .HasColumnType("REAL")
                                .HasColumnName("quality");
                        });

                    b.HasKey("Id")
                        .HasName("p_k_item");

                    b.HasIndex("ItemTypeId")
                        .HasDatabaseName("i_x_item_item_type_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("i_x_item_owner_id");

                    b.ToTable("item");
                });

            modelBuilder.Entity("Domain.Entities.ItemType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<float>("QualityMax")
                        .HasColumnType("REAL")
                        .HasColumnName("quality_max");

                    b.Property<float>("QualityMin")
                        .HasColumnType("REAL")
                        .HasColumnName("quality_min");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("rarity");

                    b.Property<bool>("StatTrackAvailable")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stat_track_available");

                    b.ComplexProperty<Dictionary<string, object>>("Image", "Domain.Entities.ItemType.Image#ItemImage", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("BattleScarred")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("battle_scarred_img");

                            b1.Property<string>("FactoryNew")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("factory_new_img");

                            b1.Property<string>("FieldTested")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("field_tested_img");

                            b1.Property<string>("MinimalWear")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("minimal_wear_img");

                            b1.Property<string>("WellWorn")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("well_worn_img");
                        });

                    b.HasKey("Id")
                        .HasName("p_k_item_type");

                    b.ToTable("item_type");
                });

            modelBuilder.Entity("Domain.ValueObjects.CaseDrop", b =>
                {
                    b.Property<string>("CaseTypeId")
                        .HasColumnType("TEXT")
                        .HasColumnName("case_type_id");

                    b.Property<string>("ItemTypeId")
                        .HasColumnType("TEXT")
                        .HasColumnName("item_type_id");

                    b.Property<decimal>("DropChance")
                        .HasColumnType("TEXT")
                        .HasColumnName("drop_chance");

                    b.Property<decimal>("DropPrice")
                        .HasColumnType("TEXT")
                        .HasColumnName("drop_price");

                    b.HasKey("CaseTypeId", "ItemTypeId")
                        .HasName("p_k_case_drop");

                    b.HasIndex("ItemTypeId")
                        .HasDatabaseName("i_x_case_drop_item_type_id");

                    b.ToTable("case_drop");
                });

            modelBuilder.Entity("Domain.Entities.Case", b =>
                {
                    b.HasOne("Domain.Entities.CaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_case__case_type_case_type_id");

                    b.HasOne("Domain.Aggregates.User", "Owner")
                        .WithMany("CaseInventory")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_case_user_owner_id");

                    b.Navigation("CaseType");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.Item", b =>
                {
                    b.HasOne("Domain.Entities.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_item__item_types_item_type_id");

                    b.HasOne("Domain.Aggregates.User", "Owner")
                        .WithMany("ItemInventory")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_item_user_owner_id");

                    b.Navigation("ItemType");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.ValueObjects.CaseDrop", b =>
                {
                    b.HasOne("Domain.Entities.CaseType", "CaseType")
                        .WithMany("Drops")
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_case_drop_case_type_case_type_id");

                    b.HasOne("Domain.Entities.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_case_drop_item_type_item_type_id");

                    b.Navigation("CaseType");

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("Domain.Aggregates.User", b =>
                {
                    b.Navigation("CaseInventory");

                    b.Navigation("ItemInventory");
                });

            modelBuilder.Entity("Domain.Entities.CaseType", b =>
                {
                    b.Navigation("Drops");
                });
#pragma warning restore 612, 618
        }
    }
}
